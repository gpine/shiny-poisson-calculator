head(predDF,10)
confusionMatrix(testing$diagnosis,pred1)
confusionMatrix(testing$diagnosis,pred2)
confusionMatrix(testing$diagnosis,pred3)
install.packages("forecast")
library(ElemStatLearn); library(caret); library(ggplot2); library(randomForest); library(forecast)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mfit <- train(y ~ ., vowel.train, method = "rf", trControl = trainControl(method="cv"),number=3)
library(ElemStatLearn); library(caret); library(ggplot2); library(randomForest); library(forecast)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mfit <- train(y ~ ., vowel.train, method = "rf", trControl = trainControl(method="cv"),number=3)
mfit2 <- train(y ~ ., vowel.train, method = "gbm")
pred1 <- predict(mfit,vowel.test)
pred2 <- predict(mfit2,vowel.test)
confusionMatrix(vowel.test$y,pred1)
confusionMatrix(vowel.test$y,pred2)
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(vowel.test$y,combPred)
confusionMatrix(vowel.test$y,pred1)
confusionMatrix(vowel.test$y,pred2)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mfit <- train(diagnosis ~ ., training, method = "rf", prox=FALSE)
set.seed(62433)
mfit2 <- train(diagnosis ~ ., training, method = "gbm")
set.seed(62433)
mfit3 <- train(diagnosis ~ ., training, method = "lda")
pred1 <- predict(mfit,testing)
pred2 <- predict(mfit2,testing)
pred3 <- predict(mfit3,testing)
confusionMatrix(testing$diagnosis,pred1)
confusionMatrix(testing$diagnosis,pred2)
confusionMatrix(testing$diagnosis,pred3)
predDF <- data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
set.seed(62433)
combModFit <- train(diagnosis ~ .,method="rf",data=predDF, prox=FALSE)
combPred <- predict(combModFit,testing)
confusionMatrix(testing$diagnosis,combPred)
head(predDF,10)
confusionMatrix(testing$diagnosis,pred1)
confusionMatrix(testing$diagnosis,pred2)
confusionMatrix(testing$diagnosis,pred3)
confusionMatrix(testing$diagnosis,combPred)
combPred <- predict(combModFit,predDF)
confusionMatrix(testing$diagnosis,combPred)
confusionMatrix(testing$diagnosis,combPred)
combPred <- predict(combModFit,testing)
confusionMatrix(testing$diagnosis,combPred)
?shuttle
shuttle$use
data(shuttle)
library(MAAS)
install.packages("MAAS")
library(MAAS)
library(MASS)
data(shuttle)
shuttle$use
mylogit <- glm(use ~ wind, data = shuttle, family = "binomial")
mylogit
exp(myLogit$coeff)
exp(mylogit$coeff)
1/0.9686888
anova(mylogit,test="Chisq")
exp(confint(logRegRavens))
exp(confint(mylogit))
mylogit2 <- glm(use ~ wind + magn, data = shuttle, family = "binomial")
exp(confint(mylogit2))
exp(mylogit$coeff)
exp(mylogit2$coeff)
mylogit2 <- glm(use ~ wind + magn + vis, data = shuttle, family = "binomial")
exp(mylogit2$coeff)
mylogit2 <- glm(use ~ wind + magn, data = shuttle, family = "binomial")
exp(mylogit2$coeff)
mylogit3 <- glm(1-use ~ wind, data = shuttle, family = "binomial")
mylogit3 <- glm((1-use) ~ wind, data = shuttle, family = "binomial")
use
shuttle$use
1-shuttle$use
use = noauto -> use1 = 1
use = auto -> use1 = 2
shuttle$use = noauto -> shuttle$use1 = 1
shuttle$use = auto -> shuttle$use1 = 2
?sapply
f1 <- function(x) x == "auto"
use1 <- lapply(shuttle$use, f1)
use1
f1 <- function(x) x == "auto"
use1 <- as.vector(lapply(shuttle$use, f1))
use1
f1 <- function(x) x == "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
use1
shuttle$use
f1 <- function(x) x == "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
use1 <- use1 + 1
use1
shuttle$use1 <- use1
mylogit <- glm(use1 ~ wind, data = shuttle, family = "binomial")
exp(mylogit$coeff)
use1 <- as.numeric(lapply(shuttle$use, f1))
shuttle$use1 <- use1
mylogit <- glm(use1 ~ wind, data = shuttle, family = "binomial")
exp(mylogit$coeff)
f1 <- function(x) x != "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
shuttle$use1 <- use1
mylogit <- glm(use1 ~ wind, data = shuttle, family = "binomial")
exp(mylogit$coeff)
mylogit2 <- glm(use1 ~ wind + magn, data = shuttle, family = "binomial")
exp(mylogit2$coeff)
shuttle$use
use1
f1 <- function(x) x == "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
shuttle$use1 <- use1
mylogit <- glm(use1 ~ wind, data = shuttle, family = "binomial")
exp(mylogit$coeff)
shuttle$use1
shuttle$wind
f2 <- function(x) x == "head"
wind1 <- as.numeric(lapply(shuttle$wind, f2))
shuttle$wind1 <- wind1
mylogit <- glm(use1 ~ wind1, data = shuttle, family = "binomial")
exp(mylogit$coeff)
mylogit2 <- glm(use1 ~ wind1 + magn, data = shuttle, family = "binomial")
exp(mylogit2$coeff)
shuttle$magn
mylogit2 <- glm(use1 ~ wind1 + factor(magn), data = shuttle, family = "binomial")
exp(mylogit2$coeff)
mylogit2 <- glm(use1 ~ wind1 + as.factor(magn), data = shuttle, family = "binomial")
exp(mylogit2$coeff)
f1 <- function(x) x != "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
shuttle$use1 <- use1
mylogit3 <- glm(use ~ wind, data = shuttle, family = "binomial")
exp(mylogit3$coeff)
f1 <- function(x) x == "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
shuttle$use1 <- use1
mylogit3 <- glm(use ~ wind, data = shuttle, family = "binomial")
exp(mylogit3$coeff)
f1 <- function(x) x != "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
shuttle$use1 <- use1
mylogit3 <- glm(use ~ wind, data = shuttle, family = "binomial")
exp(mylogit3$coeff)
f1 <- function(x) x != "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
shuttle$use1 <- use1
mylogit3 <- glm(use1 ~ wind1, data = shuttle, family = "binomial")
exp(mylogit3$coeff)
data(InsectSprays)
f1 <- function(x) x == "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
shuttle$use1 <- use1
data(InsectSprays)
?InsectSprays
InsectSprays$spray
glm1 <- glm(count ~ spray, family="poisson")
glm1 <- glm(count ~ spray, data="InsectSprays", family="poisson")
glm1 <- glm(count ~ as.factor(spray), data="InsectSprays", family="poisson")
InsectSprays$count
class(InsectSprays$count)
class(InsectSprays$spray)
glm1 <- glm(count ~ spray, data="InsectSprays", family="poisson")
glm1 <- glm(count ~ spray, data="InsectSprays", family="poisson")
lm(count ~ spray, data="InsectSprays")
summary(InsectSprays$spray)
InsectSprays$spray
as.numeric(InsectSprays$spray)
glm1 <- glm(count ~ as.numeric(spray), data="InsectSprays", family="poisson")
InsectSprays$count
rpois(84, 10) + 1
rpois(84, 5)
class(InsectSprays$count)
InsectSprays$spray2 <- as.numeric(InsectSprays$spray)
glm1 <- glm(count ~ spray2, data="InsectSprays", family="poisson")
glm(count ~ spray2, data="InsectSprays", family="poisson")
glm1 <- lm(count ~ spray2, data="InsectSprays")
glm1 <- lm(count ~ spray2, data="InsectSprays")
glm1 <- glm(count ~ spray, data=InsectSprays, family="poisson")
glm1
1/0.05588
exp(myglm$coeff)
exp(glm1$coeff)
1/1.0574713
1/exp(glm1$coeff)
glm1 <- glm(count ~ spray, data=InsectSprays, offset=1, family="poisson")
glm1 <- glm(count ~ spray + offset(1), data=InsectSprays, family="poisson")
offset(1)
offset(4)
offset(x)
glm1 <- glm(count ~ spray + offset(spray), data=InsectSprays, family="poisson")
glm1
glm1 <- glm(count ~ spray + offset(count), data=InsectSprays, family="poisson")
glm1
glm1 <- glm(count ~ spray + offset(log(10) + count), data=InsectSprays, family="poisson")
glm1
glm1 <- glm(count ~ spray, data=InsectSprays, family="poisson")
glm1
glm1 <- glm(count ~ spray + offset(log(10) + count), data=InsectSprays, family="poisson")
glm1
glm1 <- glm(count ~ spray + offset(count), data=InsectSprays, family="poisson")
glm1
glm1 <- glm(count ~ spray + offset(10 + count), data=InsectSprays, family="poisson")
glm1
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
xMat
yhat
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
(yhat[2] - yhat[1]) / (x[2]/x[1])
(yhat[9] - yhat[8]) / (x[9]/x[8])
(yhat[9] - yhat[8])
(x[9]/x[8])
x
x[9]
(yhat[9] - yhat[8]) / (x[9]-x[8])
library(MASS)
data(shuttle)
mylogit2 <- glm(use1 ~ wind1 + as.factor(magn), data = shuttle, family = "binomial")
exp(mylogit2$coeff)
f1 <- function(x) x == "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
shuttle$use1 <- use1
f2 <- function(x) x == "head"
wind1 <- as.numeric(lapply(shuttle$wind, f2))
shuttle$wind1 <- wind1
mylogit2 <- glm(use1 ~ wind1 + as.factor(magn), data = shuttle, family = "binomial")
exp(mylogit2$coeff)
wind1 <- as.numeric(lapply(shuttle$wind, f2))
shuttle$wind1 <- wind1
mylogit <- glm(use1 ~ wind1, data = shuttle, family = "binomial")
exp(mylogit$coeff)
mylogit2 <- glm(use1 ~ wind1 + as.factor(magn), data = shuttle, family = "binomial")
exp(mylogit2$coeff)
mylogit2 <- glm(use1 ~ wind1 + magn, data = shuttle, family = "binomial")
exp(mylogit2$coeff)
plot(wind1,magn,data=shuttle)
plot(shuttle$wind1,shuttle$magn)
shuttle$magn
mylogit2 <- glm(use1 ~ magn, data = shuttle, family = "binomial")
exp(mylogit2$coeff)
mylogit2 <- glm(use1 ~ wind1 + magn, data = shuttle, family = "binomial")
exp(mylogit2$coeff)
?shuttle
mylogit2 <- glm(use1 ~ wind1 + error, data = shuttle, family = "binomial")
exp(mylogit2$coeff)
mylogit2 <- glm(use1 ~ wind1 + vis, data = shuttle, family = "binomial")
exp(mylogit2$coeff)
mylogit2 <- glm(use1 ~ wind1 + magn, data = shuttle, family = "binomial")
exp(mylogit2$coeff)
mylogit
f1 <- function(x) x != "auto"
use1 <- as.numeric(lapply(shuttle$use, f1))
shuttle$use1 <- use1
mylogit3 <- glm(use1 ~ wind1, data = shuttle, family = "binomial")
mylogit3$coeff
f2 <- function(x) x == "auto"
use1 <- as.numeric(lapply(shuttle$use, f2))
shuttle$use1 <- use1
mylogit3 <- glm(use1 ~ wind1, data = shuttle, family = "binomial")
mylogit3$coeff
pnorm(90)
?pnorm
pnorm(.9)
pnorm(.95)
pnorm(.975)
?t.test
1100 + (10*1.96)
1100 - (10*1.96)
1100 - (9*1.96)
1100 - (10*1.94)
3.0 + c(-1,1) * qnorm(.975) * 1.1 / sqrt(100)
1100 + c(-1,1) * qnorm(.975) * 30 / sqrt(9)
n=9
s=30
mean=1100
qt(0.975,df=n-1)*s/sqrt(n)
1100 + c(-1,1) * qt + mean
1100 + c(-1,1) * qt
spread=qt(0.975,df=n-1)*s/sqrt(n)
1100 + c(-1,1) * spread
fib <- function(n) {
if (n==1 | n ==2) 1
else{
i = j = 1
for (x in 3:n) {
k = i + j
i = j
j = k
}
k
}
}
for (i in 1:50) {
print(fib(i))
}
data(mtcars)
# Examine the frequencies
amtable <- table(mtcars$am)
colnames(amtable) <- c("Automatic","Manual")
amtable
hist(mtcars$mpg,col="blue",breaks=32)
meanMpg <- mean(mtcars$mpg)
lines(rep(meanMpg,100),seq(0,150,length=100),col="red",lwd=5)
summary(mtcars$mpg)
length(mtcars$mpg)
# See all of the pairs
pairs(mtcars, panel = panel.smooth, main = "Cars Data", col = 3 + (mtcars$am > 0))
# Plot the two variables of interest against each other
plot(mtcars$am,mtcars$mpg,pch=19,col="blue", xlab="Transmission (0 = automatic, 1 = manual)",
ylab="Miles/(US) gallon")
lm1 <- lm(mpg ~ factor(am), data = mtcars)
abline(lm1, lwd = 4,col="red")
# Confidence interval
summary(lm1)$coef
sumCoef <- summary(lm1)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = lm1$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = lm1$df) * sumCoef[2, 2]
sumCoef[1,1]
sumCoef[1, 2]
lm1$df
qt(.975, df = lm1$df)
?qt
confint(lm1)
?confint
setwd("~/Courses/Developing Data Products")
library(slidify)
author("poissoncalc"
)
source('~/.active-rstudio-document', echo=TRUE)
slidify('index.Rmd')
library(knitr)
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
knit        : slidify::knit2slides
title       : Poisson Calculator
subtitle    :
author      : gpine
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
1. Edit YAML front matter
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
dpois(3,2)
dpois(2,3)
dpois(4,2)
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
x <- seq(-0.01, 5, 0.01)
plot(x, dpois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
warnings()
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
ppois(-0.01,1)
ppois(-5,1)
ppois(5,1)
?seq
x <- seq(0, 5, 1)
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
x <- seq(0, 5, 1)
plot(x, dpois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
x <- seq(0, 50, 1)
plot(x, dpois(x, 3), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
plot(x, dpois(x, 20), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
x <- seq(0, 50, 1)
plot(x, ppois(x, 20), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
?ppois
par(mfrow = c(2, 1))
x <- seq(0, 50, 1)
plot(x, dpois(x, 20), type = "s", ylab = "Probability",
xlab = "k", main = "Poisson Distribution")
plot(x, ppois(x, 20), type = "s", ylab = "Cumulative Probability",
xlab = "k", main = "Poisson Cumulative Distribution Function")
par(mfrow = c(1, 2))
x <- seq(0, 50, 1)
plot(x, dpois(x, 20), type = "s", ylab = "Probability",
xlab = "k", main = "Poisson Distribution")
plot(x, ppois(x, 20), type = "s", ylab = "Cumulative Probability",
xlab = "k", main = "Poisson Cumulative Distribution Function")
par(mfrow = c(1, 1))
plot(x, dpois(x, 20), type = "s", ylab = "Probability",
xlab = "k", main = "Poisson Distribution")
plot(x, ppois(x, 20), type = "s", ylab = "Cumulative Probability",
xlab = "k", main = "Poisson Cumulative Distribution Function")
x <- seq(0, 10, 1)
plot(x, dpois(x, 20), type = "s", ylab = "Probability",
xlab = "k", main = "Poisson Distribution")
plot(x, ppois(x, 20), type = "s", ylab = "Cumulative Probability",
xlab = "k", main = "Poisson Cumulative Distribution Function")
?plot
plot(x, dpois(x, 20), type = "s", ylab = "Probability",
xlab = "k", main = "Poisson Distribution", col = "orange")
?plot
xlab = "k", main = "Poisson Distribution", col = "orange", bg="orange")
plot(x, dpois(x, 20), type = "s", ylab = "Probability",
xlab = "k", main = "Poisson Distribution", col = "orange", bg="orange")
plot(x, dpois(x, 20), type = "s", ylab = "Probability",
xlab = "k", main = "Poisson Distribution", col = "orange")
plot(x, dpois(x, 20), type = "s", ylab = "Probability",
xlab = "k", main = "Poisson Distribution")
x <- seq(0, 50, 1)
plot(x, dpois(x, 20), type = "s", ylab = "Probability",
xlab = "k", main = "Poisson Distribution")
slidify("index.Rmd")
slidify("index.Rmd")
browsURL("index.Rmd")
browseURL("index.Rmd")
setwd("~/Courses/Developing Data Products/poissoncalc")
browseURL("index.Rmd")
?browseURL
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(user = "gpine", repo = "shiny-poisson-calculator")
?publish
publish(user = "gpine", repo = "shiny-poisson-calculator")
publish(user = "gpine", repo = "shiny-poisson-calculator")
publish(user = "gpine", repo = "shiny-poisson-calculator")
publish(user = "gpine", repo = "shiny-poisson-calculator2")
?publish_github
publish_github(user = "gpine", repo = "shiny-poisson-calculator")
browseURL("index.html")
publish(user = "gpine", repo = "shiny-poisson-calculator2")
publish(user = "gpine", repo = "shiny-poisson-calculator")
system('which git')
setwd("~/Courses/Developing Data Products/shiny-poisson-calculator")
publish(user = "gpine", repo = "shiny-poisson-calculator")
slidify("index.Rmd")
publish(user = "gpine", repo = "shiny-poisson-calculator")
system('which git')
?system
